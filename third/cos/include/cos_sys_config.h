#ifndef COS_SYS_CONF_H
#define COS_SYS_CONF_H
#include <stdint.h>

#include "cos_defines.h"
#include "util/log_util.h"

namespace qcloud_cos {

class CosSysConfig {
 public:
  /// \brief ????????,??:?
  static void SetAuthExpiredTime(uint64_t time);

  /// \brief ?????????????
  static void SetTimeStampDelta(int64_t dela);

  /// \brief ????????,??:??
  static void SetConnTimeoutInms(uint64_t time);

  /// \brief ????????,??:??
  static void SetRecvTimeoutInms(uint64_t time);

  /// \brief ????????,??:??,??:10M
  static void SetUploadPartSize(uint64_t part_size);

  /// \brief ??????????,??:??,??: 20M
  static void SetUploadCopyPartSize(uint64_t part_size);

  /// \brief ???????????????,??: 5
  static void SetUploadThreadPoolSize(unsigned size);

  /// \brief ?????????????,??: 2
  static void SetAsynThreadPoolSize(unsigned size);

  /// \brief ??log??,1:??,2:syslog,3:???,??:1
  static void SetLogOutType(LOG_OUT_TYPE log);

  /// \brief ??log????,COS_LOG_ERR/WRAN/INFO/DBG
  static void SetLogLevel(LOG_LEVEL level);

  /// \brief ??????????
  static void SetDownThreadPoolSize(unsigned size);

  /// \brief ?????????
  static void SetDownSliceSize(unsigned slice_size);

  /// \brief ????????
  static void SetKeepAlive(bool keepalive);

  /// \brief ????????
  static void SetKeepIdle(int64_t keepidle);

  /// \brief ????????
  static void SetKeepIntvl(int64_t keepintvl);

  static void SetDestDomain(const std::string& dest_domain);

  /// \brief ????????,???
  static uint64_t GetAuthExpiredTime();

  /// \brief ?????????????
  static int64_t GetTimeStampDelta();

  /// \brief ????????,??:??
  static uint64_t GetConnTimeoutInms();

  /// \brief ????????,??:??
  static uint64_t GetRecvTimeoutInms();

  /// \brief ????????,??:??
  static uint64_t GetUploadPartSize();

  /// \brief ??????????,??:??
  static uint64_t GetUploadCopyPartSize();

  /// \brief ?????????
  static unsigned GetUploadThreadPoolSize();

  /// \brief ?????????
  static unsigned GetAsynThreadPoolSize();

  /// \brief ????????,???????
  static int GetLogOutType();

  /// \brief ????????
  static int GetLogLevel();

  /// \brief ??CosSysConfig?????
  static void PrintValue();

  /// \brief ????????
  static unsigned GetDownSliceSize();

  /// \brief ?????????
  static unsigned GetDownThreadPoolSize();

  /// \brief ??keepalive??
  static bool GetKeepAlive();
  static int64_t GetKeepIdle();
  static int64_t GetKeepIntvl();

  /// \brief ?????????MD5
  static bool IsCheckMd5();

  /// \brief ?????????MD5
  static void SetCheckMd5(bool is_check_md5);

  static bool IsDomainSameToHost();

  static void SetDomainSameToHost(bool is_domain_same_to_host);

  /// \brief ????appid?region?bucket_name?????hostname
  static std::string GetHost(uint64_t app_id, const std::string& region,
                             const std::string& bucket_name);

  /// \brief ??CI??
  static std::string GetCIHost(const std::string& bucket_name,
                               const std::string& region);

  /// \brief ??PIC??                            
  static std::string GetPICHost(uint64_t app_id, const std::string& region,
                                  const std::string& bucket_name);

  static std::string GetDestDomain();

  /// \brief ????????ip????
  static bool IsUseIntranet();

  static void SetIsUseIntranet(bool is_use_interanet);

  static void SetIntranetAddr(const std::string& intranet_addr);

  /// \brief ????ip????
  static std::string GetIntranetAddr();

  /// \brief ????????
  static LogCallback GetLogCallback();

  /// \brief ??????
  static void SetLogCallback(const LogCallback log_callback);

  /// \brief ??????dns cache
  static void SetUseDnsCache(bool is_use_dns_cache);

  /// \brief ??????dns cache
  static bool GetUseDnsCache();

  /// \brief ??dns cache????
  static void SetDnsCacheExpireSeconds(unsigned expire_secondes);

  /// \brief ??dns cache????
  static unsigned GetDnsCacheExpireSeconds();

  /// \breif ??dns cache??
  static void SetDnsCacheSize(unsigned cache_size);

  /// \brief ??dns cache??
  static unsigned GetDnsCacheSize();

 private:
  // ????:0,???,1:?????,2:???syslog
  static LOG_OUT_TYPE m_log_outtype;
  // ????:1: ERR, 2: WARN, 3:INFO, 4:DBG
  static LOG_LEVEL m_log_level;
  // ??????
  static uint64_t m_upload_part_size;
  // ??????
  static uint64_t m_upload_copy_part_size;
  // ?????????????????????????
  // delta = network_ts - local_ts
  static int64_t m_timestamp_delta;
  // ??????(?)
  static uint64_t m_sign_expire_in_s;
  // Http??????(??)
  static uint64_t m_conn_timeout_in_ms;
  // Http??????(??)
  static uint64_t m_recv_timeout_in_ms;
  // ??????????????(??????)
  static unsigned m_threadpool_size;
  // ???????????(?????)
  static unsigned m_asyn_threadpool_size;
  // ????????????
  static unsigned m_down_thread_pool_size;
  // ???????,???????
  static unsigned m_down_slice_size;
  // ???????
  static bool m_keep_alive;
  // ????????keepalive?????s
  static int64_t m_keep_idle;
  // ??keepalive?????????s
  static int64_t m_keep_intvl;
  // ???????md5
  static bool m_is_check_md5;

  static std::string m_dest_domain;

  static bool m_is_domain_same_to_host;

  static bool m_is_use_intranet;

  static std::string m_intranet_addr;
  // ????
  static LogCallback m_log_callback;
  // ????dns cache
  static bool m_use_dns_cache;
  // dns cache????
  static unsigned m_dns_cache_expire_seconds;
  // dns cache??
  static unsigned m_dns_cache_size;
};

}  // namespace qcloud_cos
#endif
